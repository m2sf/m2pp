(*!m2iso*) (* Copyright (c) 2017 Modula-2 Software Foundation *)

DEFINITION MODULE Outfile;

(* I/O library for writing text files with tab expansion *)

IMPORT BasicFileIO;

FROM String IMPORT StringT; (* alias for String.String *)


(* ---------------------------------------------------------------------------
 * File type for reading
 * ------------------------------------------------------------------------ *)

TYPE Outfile; (* OPAQUE *)

TYPE OutfileT = Outfile; (* for unqualified use *)


(* ---------------------------------------------------------------------------
 * procedure Open(outfile, path, status )
 * ---------------------------------------------------------------------------
 * Opens the file at path and passes a newly allocated and initialised outfile
 * object back in out-parameter outfile. Passes NilOutfile on failure.
 * ------------------------------------------------------------------------ *)

PROCEDURE Open
 ( VAR (* NEW *) outfile : Outfile;
   VAR (* CONST *) path  : ARRAY OF CHAR;
   VAR            status : BasicFileIO.Status );


(* ---------------------------------------------------------------------------
 * procedure Close(outfile)
 * ---------------------------------------------------------------------------
 * Closes the file associated with outfile and passes NilOutfile in outfile.
 * ------------------------------------------------------------------------ *)

PROCEDURE Close ( VAR outfile : Outfile );


(* ---------------------------------------------------------------------------
 * procedure SetTabWidth(outfile, value)
 * ---------------------------------------------------------------------------
 * Sets tab width for outfile. The default value is two.
 * ------------------------------------------------------------------------ *)

TYPE TabWidth = CARDINAL [0..8];

PROCEDURE SetTabWidth ( outfile : Outfile; value : TabWidth );


(* ---------------------------------------------------------------------------
 * procedure WriteChar(outfile, ch)
 * ---------------------------------------------------------------------------
 * Writes character ch to outfile.
 * ------------------------------------------------------------------------ *)

PROCEDURE WriteChar ( outfile : Outfile; ch : CHAR );


(* ---------------------------------------------------------------------------
 * procedure WriteChars(outfile, array)
 * ---------------------------------------------------------------------------
 * Writes characters in array to outfile.
 * ------------------------------------------------------------------------ *)

PROCEDURE WriteChars
  ( outfile : Outfile; VAR (* CONST *) array : ARRAY OF CHAR );


(* ---------------------------------------------------------------------------
 * procedure WriteString(outfile, string)
 * ---------------------------------------------------------------------------
 * Writes string to outfile.
 * ------------------------------------------------------------------------ *)

PROCEDURE WriteString ( outfile : Outfile; string : StringT );


(* ---------------------------------------------------------------------------
 * procedure WriteLn(outfile)
 * ---------------------------------------------------------------------------
 * Writes newline to outfile.
 * ------------------------------------------------------------------------ *)

PROCEDURE WriteLn ( outfile : Outfile );


(* ---------------------------------------------------------------------------
 * function status(outfile)
 * ---------------------------------------------------------------------------
 * Returns status of last operation.
 * ------------------------------------------------------------------------ *)

PROCEDURE status ( outfile : Outfile ) : BasicFileIO.Status;


(* ---------------------------------------------------------------------------
 * procedure line(outfile)
 * ---------------------------------------------------------------------------
 * Returns the line number of the current writing position of outfile.
 * ------------------------------------------------------------------------ *)

PROCEDURE line ( outfile : Outfile ) : CARDINAL;


(* ---------------------------------------------------------------------------
 * procedure column(outfile)
 * ---------------------------------------------------------------------------
 * Returns the column number of the current writing position of outfile.
 * ------------------------------------------------------------------------ *)

PROCEDURE column ( outfile : Outfile ) : CARDINAL;


END Outfile.