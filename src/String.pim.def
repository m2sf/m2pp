(*!m2pim*) (* Copyright (c) 2017 Modula-2 Software Foundation *)

DEFINITION MODULE String; (* PIM version *)

(* Interned Strings *)

IMPORT StrBlank;


(* Maximum String Length *)

CONST MaxLength = StrBlank.MaxLength;


(* String Type *)

TYPE String; (* OPAQUE *)

TYPE StringT = String; (* for unqualified use *)


(* NIL String *)

CONST Nil = String(NIL); (* PIM specific cast *)


(* String Comparison Result Type *)

TYPE Comparison = ( Equal, Less, Greater );


(* Procedure type for passing to procedure WithCharsDo *)

TYPE CharArrayProc = PROCEDURE ( ARRAY OF CHAR );


(* Procedure type for passing to procedure WithCharsInSliceDo *)

TYPE CharProc = PROCEDURE ( CHAR );


(* Operations *)

(* ---------------------------------------------------------------------------
 * function String.forConstArray(array)
 * ---------------------------------------------------------------------------
 * Looks up the interned string for a character array constant and returns it.
 * Creates and returns a new interned string if no matching entry is found.
 * ------------------------------------------------------------------------ *)

PROCEDURE forConstArray ( VAR array : ARRAY OF CHAR) : StringT;


(* ---------------------------------------------------------------------------
 * function String.forArray(array)
 * ---------------------------------------------------------------------------
 * Looks up the interned string for the given character array and returns it.
 * Creates and returns a new interned string if no matching entry is found.
 * ------------------------------------------------------------------------ *)

PROCEDURE forArray ( VAR (*CONST*) array : ARRAY OF CHAR) : StringT;


(* ---------------------------------------------------------------------------
 * function String.forArraySlice(array, start, end)
 * ---------------------------------------------------------------------------
 * Looks up the interned string for the given slice of the given character
 * array and returns it. Creates and returns a new interned string with the
 * slice if no matching entry is found.
 * ------------------------------------------------------------------------ *)

PROCEDURE forArraySlice
  ( VAR (*CONST*) array : ARRAY OF CHAR; start, end : CARDINAL) : StringT;


(* ---------------------------------------------------------------------------
 * function String.forSlice(string, start, end)
 * ---------------------------------------------------------------------------
 * Looks up the interned string for the given slice of the given string
 * and returns it. Creates and returns a new interned string with the
 * slice if no matching entry is found.
 * ------------------------------------------------------------------------ *)

PROCEDURE forSlice ( string : StringT; start, end : CARDINAL ) : StringT;


(* ---------------------------------------------------------------------------
 * function String.concat(string1, string2)
 * ---------------------------------------------------------------------------
 * Looks up the product of concatenating string1 and string2 and returns the
 * matching interned string if an entry exists. Creates and returns a new
 * interned string with the concatenation product if no match is found.
 * ------------------------------------------------------------------------ *)

PROCEDURE concat ( string1, string2 : StringT ) : StringT;


(* ---------------------------------------------------------------------------
 * function String.length(string)
 * ---------------------------------------------------------------------------
 * Returns the length of the given string.  Returns 0 if string is NIL.
 * ------------------------------------------------------------------------ *)

PROCEDURE length ( string : StringT ) : CARDINAL;


(* ---------------------------------------------------------------------------
 * function String.charAtIndex(string, index)
 * ---------------------------------------------------------------------------
 * Returns the character at the given index in the given string.
 * Returns ASCII NUL if string is NIL or index is out of range.
 * ------------------------------------------------------------------------ *)

PROCEDURE charAtIndex ( string : StringT; index : CARDINAL ) : CHAR;


(* ---------------------------------------------------------------------------
 * procedure String.CopyToArray(string, array, charsCopied)
 * ---------------------------------------------------------------------------
 * Copies the given string to the given array reference. Returns without copy-
 * ing if string is NIL or if the array size is insufficient to hold the
 * entire string. Passes the number of characters copied in charsCopied.
 * ------------------------------------------------------------------------ *)

PROCEDURE CopyToArray
  ( string : StringT; VAR array : ARRAY OF CHAR; VAR charsCopied : CARDINAL );


(* ---------------------------------------------------------------------------
 * procedure String.CopySliceToArray(string, start, end, array, charsCopied)
 * ---------------------------------------------------------------------------
 * Copies the given slice of the given string to the given array.  Returns
 * without copying if string is NIL, if start and end do not specify a valid
 * slice within the string or if the array size is insufficient to hold the
 * entire slice. Passes the number of characters copied in charsCopied.
 * ------------------------------------------------------------------------ *)

PROCEDURE CopySliceToArray
  ( string : StringT;
    start, end : CARDINAL;
    VAR array : ARRAY OF CHAR;
    VAR charsCopied : CARDINAL );


(* ---------------------------------------------------------------------------
 * procedure String.AppendSliceToArray(string, start, end, array, charsCopied)
 * ---------------------------------------------------------------------------
 * Appends the given slice of the given string to the given array.  Returns
 * without copying if string is NIL, if start and end do not specify a valid
 * slice within the string or if the array size is insufficient to hold the
 * resulting string. Passes the number of characters copied in charsCopied.
 * ------------------------------------------------------------------------ *)

PROCEDURE AppendSliceToArray
  ( string : StringT;
    start, end : CARDINAL;
    VAR array : ARRAY OF CHAR;
    VAR charsCopied : CARDINAL );


(* ---------------------------------------------------------------------------
 * function String.matchesArray(string, array)
 * ---------------------------------------------------------------------------
 * Returns TRUE if the given string matches the given array constant. Returns
 * FALSE if string is NIL or if string does not match the array.
 * ------------------------------------------------------------------------ *)

PROCEDURE matchesConstArray
  ( string : StringT; array : ARRAY OF CHAR ) : BOOLEAN;


(* ---------------------------------------------------------------------------
 * function String.matchesArray(string, array)
 * ---------------------------------------------------------------------------
 * Returns TRUE if the given string matches the given array. Returns FALSE
 * if string is NIL or if string does not match the array.
 * ------------------------------------------------------------------------ *)

PROCEDURE matchesArray
  ( string : StringT; VAR (*CONST*) array : ARRAY OF CHAR ) : BOOLEAN;


(* ---------------------------------------------------------------------------
 * function String.matchesArraySlice(string, array, start, end)
 * ---------------------------------------------------------------------------
 * Returns TRUE if the given string matches the given slice of the given
 * array. Returns FALSE if string is NIL or if start and end do not specify
 * a valid slice within the array.
 * ------------------------------------------------------------------------ *)

PROCEDURE matchesArraySlice
  ( string : StringT;
    VAR (*CONST*) array : ARRAY OF CHAR;
    start, end : CARDINAL ) : BOOLEAN;


(* ---------------------------------------------------------------------------
 * function String.comparison(left, right)
 * ---------------------------------------------------------------------------
 * Compares strings left and right using ASCII collation order, returns Equal
 * if the strings match,  Less if left < right,  or Greater if left > right.
 * ------------------------------------------------------------------------ *)

PROCEDURE comparison ( left, right : String ) : Comparison;


(* ---------------------------------------------------------------------------
 * procedure String.WithCharsDo(string, proc)
 * ---------------------------------------------------------------------------
 * Executes proc passing the character array of string.
 * ------------------------------------------------------------------------ *)

PROCEDURE WithCharsDo ( string : String; proc : CharArrayProc );


(* ---------------------------------------------------------------------------
 * procedure String.WithCharsInSliceDo(string, proc)
 * ---------------------------------------------------------------------------
 * Executes proc for each character in the given slice of string
 * passing each character from start to end.
 * ------------------------------------------------------------------------ *)

PROCEDURE WithCharsInSliceDo
  ( string : StringT; start, end : CARDINAL; proc : CharProc );


(* Introspection *)

(* ---------------------------------------------------------------------------
 * function String.count()
 * ---------------------------------------------------------------------------
 * Returns the number of interned strings.
 * ------------------------------------------------------------------------ *)

PROCEDURE count () : CARDINAL;


END String.